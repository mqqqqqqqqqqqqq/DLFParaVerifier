#lang ivy1.7

type node_t

type other_t = {other_em}

type cache_state_t = {i_em, s_em, e_em}

type msg_cmd_t = {empty_em, reqs_em, reqe_em, inv_em, invack_em, gnts_em, gnte_em}

individual cache_State(G:node_t) : cache_state_t

individual chan1_Cmd(V:node_t) : msg_cmd_t

individual chan2_Cmd(F:node_t) : msg_cmd_t

individual chan3_Cmd(S:node_t) : msg_cmd_t

individual invset(F:node_t) : bool
individual shrset(K:node_t) : bool
individual exgntd : bool
individual curcmd : msg_cmd_t


after init{
    chan1_Cmd(A) := empty_em;
    
    chan2_Cmd(A) := empty_em;
    
    chan3_Cmd(A) := empty_em;
    
    cache_State(A) := i_em;
    
    invset(A) := false;
    
    shrset(A) := false;
    
    exgntd := false;

    curcmd := empty_em;

}


action recvgnte(i: node_t) = {
    require chan2_Cmd(i) = gnte_em;
    cache_State(i) := e_em;
    chan2_Cmd(i) := empty_em;
}



action recvgnts(i: node_t) = {
    require chan2_Cmd(i) = gnts_em;
    cache_State(i) := s_em;
    chan2_Cmd(i) := empty_em;
}



action sendgnte(i: node_t) = {
    require curcmd = reqe_em & chan2_Cmd(i) = empty_em & exgntd = false & shrset(A) = false;
    chan2_Cmd(i) := gnte_em;
    shrset(i) := true;
    exgntd := true;
    curcmd := empty_em;
}



action sendgnts(i: node_t) = {
    require curcmd = reqs_em & chan2_Cmd(i) = empty_em & exgntd = false;
    chan2_Cmd(i) := gnts_em;
    shrset(i) := true;
    curcmd := empty_em;
}



action recvinvack1(i: node_t) = {
    require chan3_Cmd(i) = invack_em & curcmd ~= empty_em & exgntd = true;
    chan3_Cmd(i) := empty_em;
    shrset(i) := false;
    exgntd := false;
}



action recvinvack2(i: node_t) = {
    require chan3_Cmd(i) = invack_em & curcmd ~= empty_em & exgntd = false;
    chan3_Cmd(i) := empty_em;
    shrset(i) := false;
}



action sendinvack(i: node_t) = {
    require chan2_Cmd(i) = inv_em & chan3_Cmd(i) = empty_em;
    chan2_Cmd(i) := empty_em;
    chan3_Cmd(i) := invack_em;
    cache_State(i) := i_em;
}



action sendinv(i: node_t) = {
    require chan2_Cmd(i) = empty_em & invset(i) = true & (curcmd = reqe_em | curcmd = reqs_em & exgntd = true);
    chan2_Cmd(i) := inv_em;
    invset(i) := false;
}



action recvreqe(i: node_t) = {
    require curcmd = empty_em & chan1_Cmd(i) = reqe_em;
    curcmd := reqe_em;
    chan1_Cmd(i) := empty_em;
    invset(A) := shrset(A);
}



action recvreqs(i: node_t) = {
    require curcmd = empty_em & chan1_Cmd(i) = reqs_em;
    curcmd := reqs_em;
    chan1_Cmd(i) := empty_em;
    invset(A) := shrset(A);
}



action sendreqe(i: node_t) = {
    require chan1_Cmd(i) = empty_em & (cache_State(i) = i_em | cache_State(i) = s_em);
    chan1_Cmd(i) := reqe_em;
}



action sendreqs(i: node_t) = {
    require chan1_Cmd(i) = empty_em & cache_State(i) = i_em;
    chan1_Cmd(i) := reqs_em;
}



export recvgnte
export recvgnts
export sendgnte
export sendgnts
export recvinvack1
export recvinvack2
export sendinvack
export sendinv
export recvreqe
export recvreqs
export sendreqe
export sendreqs

conjecture ~(forall A.~(chan2_Cmd(A) = gnte_em) & ~(chan2_Cmd(A) = gnts_em) & ~(curcmd = reqe_em & chan2_Cmd(A) = empty2_em & exgntd = false & shrset(A) = false) & ~(curcmd = reqs_em & chan2_Cmd(A) = empty2_em & exgntd = false) & ~(chan3_Cmd(A) = invack_em & curcmd ~= empty1_em & exgntd = true) & ~(chan3_Cmd(A) = invack_em & curcmd ~= empty1_em & exgntd = false) & ~(chan2_Cmd(A) = inv_em & chan3_Cmd(A) = empty3_em) & ~(chan2_Cmd(A) = empty2_em & invset(A) = true & (curcmd = reqe_em | curcmd = reqs_em & exgntd = true)) & ~(curcmd = empty1_em & chan1_Cmd(A) = reqe_em) & ~(curcmd = empty1_em & chan1_Cmd(A) = reqs_em) & ~(chan1_Cmd(A) = empty1_em & (cache_State(A) = i_em | cache_State(A) = s_em)) & ~(chan1_Cmd(A) = empty1_em & cache_State(A) = i_em))

axiom exists N1:node_t, N2:node_t. N1~=N2

conjecture forall B. ~(exgntd = false & cache_State(B) = e_em)
conjecture forall B. ~(shrset(B) = false & cache_State(B) = e_em)
conjecture forall A,B. (A ~= B) -> ~(chan2_Cmd(A) = gnte_em & cache_State(B) = e_em)
conjecture forall A. ~(chan2_Cmd(A) = gnte_em & curcmd = reqs_em & invset(A) = false)
conjecture forall A. ~(chan2_Cmd(A) = gnte_em & exgntd = false)
conjecture forall A. ~(chan2_Cmd(A) = gnte_em & curcmd = reqe_em & invset(A) = false)
conjecture forall A. ~(chan2_Cmd(A) = gnts_em & exgntd = true)
conjecture forall A. ~(chan2_Cmd(A) = gnts_em & shrset(A) = false)
conjecture forall A. ~(chan2_Cmd(A) = gnts_em & curcmd = reqe_em & invset(A) = false)
conjecture forall B. ~(chan3_Cmd(B) = empty3_em & chan2_Cmd(B) = empty2_em & cache_State(B) = i_em & shrset(B) = true)
conjecture forall A,B. (A ~= B) -> ~(chan3_Cmd(A) = invack_em & cache_State(B) = e_em)
conjecture forall B,A. (B ~= A) -> ~(cache_State(B) = s_em & cache_State(A) = e_em)
conjecture forall B. ~(curcmd = reqe_em & chan2_Cmd(B) = empty2_em & cache_State(B) = s_em & invset(B) = false)
conjecture forall B. ~(curcmd = reqs_em & cache_State(B) = s_em & invset(B) = false)
conjecture forall B. ~(cache_State(B) = e_em & chan3_Cmd(B) = invack_em)
conjecture forall B. ~(shrset(B) = false & chan2_Cmd(B) = gnte_em)
conjecture forall A,B. (A ~= B) -> ~(chan2_Cmd(A) = gnte_em & chan2_Cmd(B) = gnte_em)
conjecture forall A. ~(chan2_Cmd(A) = gnte_em & chan3_Cmd(A) = invack_em)
conjecture forall A,B. (A ~= B) -> ~(chan2_Cmd(A) = gnte_em & chan3_Cmd(B) = invack_em)
conjecture forall A. ~(chan2_Cmd(A) = gnts_em & chan3_Cmd(A) = invack_em)
conjecture forall B,A. (B ~= A) -> ~(cache_State(B) = e_em & chan2_Cmd(A) = inv_em)
conjecture forall B,A. (B ~= A) -> ~(cache_State(B) = s_em & chan2_Cmd(A) = gnte_em)
conjecture forall A,B. (A ~= B) -> ~(cache_State(A) = e_em & chan2_Cmd(B) = gnts_em)
conjecture forall B. ~(cache_State(B) = s_em & shrset(B) = false)
conjecture forall B. ~(invset(B) = false & curcmd = reqs_em & chan2_Cmd(B) = gnts_em)
conjecture forall B. ~(cache_State(B) = s_em & exgntd = true)
conjecture forall A. ~(chan3_Cmd(A) = invack_em & shrset(A) = false)
conjecture forall A,B. (A ~= B) -> ~(chan2_Cmd(A) = gnte_em & chan2_Cmd(B) = inv_em)
conjecture forall A. ~(chan3_Cmd(A) = invack_em & exgntd = false & curcmd = reqs_em)
conjecture forall B,A. (B ~= A) -> ~(cache_State(B) = e_em & invset(A) = true)
conjecture forall A,B. (A ~= B) -> ~(chan2_Cmd(A) = gnte_em & chan2_Cmd(B) = gnts_em)
conjecture forall B. ~(cache_State(B) = s_em & chan3_Cmd(B) = invack_em)
conjecture forall A. ~(shrset(A) = false & chan2_Cmd(A) = inv_em)
conjecture forall A,B. (A ~= B) -> ~(chan2_Cmd(A) = gnte_em & invset(B) = true)
conjecture forall A,B. (A ~= B) -> ~(curcmd = reqs_em & chan3_Cmd(A) = invack_em & chan3_Cmd(B) = invack_em)
conjecture forall A. ~(curcmd = reqs_em & exgntd = false & chan2_Cmd(A) = inv_em)
conjecture forall A. ~(chan3_Cmd(A) = invack_em & curcmd = empty1_em)
conjecture forall B,A. (B ~= A) -> ~(cache_State(B) = e_em & shrset(A) = true)
conjecture forall A. ~(chan2_Cmd(A) = inv_em & chan3_Cmd(A) = invack_em)
conjecture forall A. ~(shrset(A) = false & invset(A) = true)
conjecture forall A,B. (A ~= B) -> ~(chan2_Cmd(A) = gnte_em & shrset(B) = true)
conjecture forall B,A. (B ~= A) -> ~(chan3_Cmd(B) = invack_em & curcmd = reqs_em & chan2_Cmd(A) = inv_em)
conjecture forall A. ~(chan2_Cmd(A) = inv_em & curcmd = empty1_em)
conjecture forall A. ~(chan3_Cmd(A) = invack_em & invset(A) = true)
conjecture forall A,B. (A ~= B) -> ~(chan2_Cmd(A) = inv_em & curcmd = reqs_em & chan2_Cmd(B) = inv_em)
conjecture forall B,A. (B ~= A) -> ~(curcmd = reqs_em & chan3_Cmd(B) = invack_em & invset(A) = true)
conjecture forall A. ~(invset(A) = true & chan2_Cmd(A) = inv_em)
conjecture forall B,A. (B ~= A) -> ~(chan2_Cmd(B) = inv_em & curcmd = reqs_em & invset(A) = true)
conjecture forall A,B. (A ~= B) -> ~(invset(A) = true & exgntd = true & invset(B) = true)
conjecture forall B,A. (B ~= A) -> ~(exgntd = true & shrset(B) = true & shrset(A) = true)
conjecture exists A,B. (A ~= B) -> ~((shrset(A) = false | chan3_Cmd(B) = empty3_em & chan2_Cmd(B) = empty2_em & cache_State(B) = i_em) & exgntd = true)
conjecture exists A,B. (A ~= B) -> ~((chan3_Cmd(A) = empty3_em & chan2_Cmd(A) = empty2_em & cache_State(A) = i_em | chan3_Cmd(B) = empty3_em & chan2_Cmd(B) = empty2_em & invset(B) = false) & curcmd = reqs_em & exgntd = true)
conjecture exists A,B. (A ~= B) -> ~((chan3_Cmd(A) = empty3_em & chan2_Cmd(A) = empty2_em & cache_State(A) = i_em | chan3_Cmd(B) = empty3_em & chan2_Cmd(B) = empty2_em & invset(B) = false) & curcmd = reqe_em & exgntd = true)
